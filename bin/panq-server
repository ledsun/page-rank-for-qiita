#!/usr/bin/env node

const http = require('http')
const parser = require('url')
const WebSocketServer = require('websocket')
  .server
const connect = require('connect')
const compression = require('compression')
const serveStatic = require('serve-static')

const sendIndex = require('../lib/server/send-index')
const startSearh = require('../lib/server/start-search')
const journal = require('../lib/journal')
const dummySocket = require('../lib/server/dummy-socket')

const PORT = process.env.PORT || 3000
const app = connect()
app
  .use(compression())
  .use('/', (req, res, next) => {
    const url = parser.parse(req.url, true)
    if (url.pathname === '/' || url.pathname === '/index.html') {
      sendIndex(req, res, journal.queryHistories)
    } else {
      next()
    }
  })
  .use(serveStatic(`${__dirname}/../public`), {
    immutable: true
  })
const httpServer = http.createServer(app)
const wsServer = new WebSocketServer({
  httpServer
})

wsServer.on('request', (request) => {
  const connection = request.accept(null, request.origin)
  connection.on('message', (message) => {
    if (message.type === 'utf8') {
      startSearh(message.utf8Data, connection, journal, 300)
    }
  })
})
httpServer.listen(PORT, () => console.log(new Date(), `Server running at port:${PORT}`))

// 自動検索
setTimeout(() => {
  const already = new Set()

  // 前回の検索でみつかたタグを対象にする
  dummySocket.done((tags) => {
    // 一定数以上見つかったら停止
    if (already.size > 300) {
      console.log(new Date(), 'Finish auto search.')
      return
    }

    // すでに検索済みのタグはスキップ
    const next = tags.filter((t) => !already.has(t))
    if (next.length) {
      already.add(next[0])
      setTimeout(() => startSearh(next[0], dummySocket, journal, 30), 100)
    } else {
      console.log(new Date(), 'Finish auto search. There is no more tag.')
    }
  })

  // 最初にタグなしで検索
  already.add('')
  startSearh('', dummySocket, journal)
}, 100)
