#!/usr/bin/env node

const http = require('http')
const parser = require('url')
const WebSocketServer = require('websocket')
  .server
const connect = require('connect')
const compression = require('compression')
const serveStatic = require('serve-static')
const morgan = require('morgan')

const sendIndex = require('../lib/server/send-index')
const onWebSocketRequest = require('../lib/server/on-web-socket-request')
const startSearh = require('../lib/server/start-search')
const journal = require('../lib/journal')
const dummySocket = require('../lib/server/dummy-socket')
const SessionStore = require('../lib/server/session-store')

const sessionStore = new SessionStore()

const PORT = process.env.PORT || 3000
const app = connect()
app
  .use(morgan('common'))
  .use(compression())
  .use('/', (req, res, next) => {
    const url = parser.parse(req.url, true)
    if (url.pathname === '/' || url.pathname === '/index.html') {
      const tag = (url.query.tag || '')
        .toLowerCase()
      const [sessionId, knownUrls] = sendIndex(req, res, journal, tag)
      sessionStore.set(sessionId, {
        tag: tag || '',
        knownUrls
      })
    } else {
      next()
    }
  })
  .use(serveStatic(`${__dirname}/../public`, {
    immutable: true,
    maxAge: '1h'
  }))
const httpServer = http.createServer(app)
const wsServer = new WebSocketServer({
  httpServer
})

wsServer.on('request', onWebSocketRequest(sessionStore, journal))
httpServer.listen(PORT, () => console.log(new Date(), `Server running at port:${PORT}`))

// 自動検索
setTimeout(() => {
  const already = new Set()

  // 前回の検索でみつかたタグを対象にする
  dummySocket.done((tags) => {
    // 一定数以上見つかったら停止
    if (already.size > 300) {
      console.log(new Date(), 'Finish auto search.')
      return
    }

    // すでに検索済みのタグはスキップ
    const next = tags.filter((t) => !already.has(t))
    if (next.length) {
      already.add(next[0])
      setTimeout(() => startSearh(dummySocket, next[0], new Set(), journal, 30), 100)
    } else {
      console.log(new Date(), 'Finish auto search. There is no more tag.')
    }
  })

  // 最初にタグなしで検索
  already.add('')
  startSearh(dummySocket, '', new Set(), journal)
}, 100)

// 定期的にメモリ使用量を吐き出す
setInterval(() => {
  const used = process.memoryUsage()
  const messages = []
  for (let key in used) {
    messages.push(`${key}: ${Math.round(used[key] / 1024 / 1024 * 100) / 100} MB`)
  }
  console.log(new Date(), messages.join(', '))
}, 5 * 60 * 1000)
